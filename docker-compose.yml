version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: media_generation_postgres
    environment:
      POSTGRES_DB: media_generation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - media_generation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: media_generation_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - media_generation_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: media_generation_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - media_generation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: media_generation_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/media_generation
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
      - STORAGE_TYPE=minio
      - DEBUG=false
      - LOG_LEVEL=INFO
      # Optional: Add your real Replicate token for AI generation
      # If not provided, system runs in MOCK MODE for testing
      # Get token from: https://replicate.com/account/api-tokens
      - REPLICATE_API_TOKEN=${REPLICATE_API_TOKEN:-}
    ports:
      - "8000:8000"
    volumes:
      - ./media_files:/app/media_files
    networks:
      - media_generation_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: media_generation_celery_worker
    command: ["poetry", "run", "celery", "-A", "app.tasks.celery_app", "worker", "--loglevel=info", "--queues=generation"]
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/media_generation
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_SECURE=false
      - STORAGE_TYPE=minio
      - DEBUG=false
      - LOG_LEVEL=INFO
      # Optional: Add your real Replicate token for AI generation
      # If not provided, system runs in MOCK MODE for testing
      # Get token from: https://replicate.com/account/api-tokens
      - REPLICATE_API_TOKEN=${REPLICATE_API_TOKEN:-}
    volumes:
      - ./media_files:/app/media_files
    networks:
      - media_generation_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: media_generation_celery_beat
    command: ["poetry", "run", "celery", "-A", "app.tasks.celery_app", "beat", "--loglevel=info"]
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/media_generation
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DEBUG=false
      - LOG_LEVEL=INFO
    networks:
      - media_generation_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Flower (monitoring)
  celery_flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: media_generation_celery_flower
    command: ["poetry", "run", "celery", "-A", "app.tasks.celery_app", "flower", "--port=5555"]
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    networks:
      - media_generation_network
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  media_generation_network:
    driver: bridge 